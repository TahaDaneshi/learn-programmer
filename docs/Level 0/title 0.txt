شما در سطح صفر قرار دارید و در اینجا اماده خوا هید شد که در عدامه با مشکلات کمتری مواجهه شوید
===========================================================================================
0) Right click information = اطلاعات راست کلیک
	View - Sort by - Group by - Refresh -copy - cut - Paste - Paste shortcut - New - Properties
	Open - Print - Edit - Share - Open with - Send to - Create shortcut - Delete - Rename
	Open in new widow - Pin to Quick access - Add to archive -
===========================================================================================
1) Key words and Elementary works = کلید واژه ها و کار های ابتدایی
    Copy & Cut & paste files - Change Name file | folder- Create New File and  Folder- Delete File
    Download File from Internet - Install App - Uninstall App - 
    Key Words Important (Ctrl + c - Ctrl + v - Ctrl + x - Ctrl  + s - Ctrl + z - Shift + Alt) -
    Concepts Key Words ( Space - Enter - Ctrl - Alt - Shift -   Caps Lock - Tab - Esc - Num Lock - End - Delete - Home -  Insert - Page Up - Page Down )
===========================================================================================
1.1) F1 to F12
  F1 - Help - راهنما
    ویندوز/لینوکس: در بیشتر برنامه‌ها. Help باز کردن
    VS Code: (هم کار میکند Ctrl+F1) Command Palette باز کردن
    Example: لیست تمام دستورات را نشان می‌دهد F1 هستید، فشار دادن VS Code وقتی در
  F2 - Rename - تغییر نام
    ویندوز: تغییر نام فایل/پوشه انتخاب‌شده
    VS Code/IDEها: تغییر نام متغیر، تابع یا فایل
    Example:بزنید، می‌توانید نام آن را در تمام کد تغییر دهید F2 اگر روی یک متغیر در پایتان کلیک کنید و
  F3 – جستجوی بعدی
    مرورگرها/ادیتورها: حرکت به نتیجه بعدی در جستجو (Ctrl+F)
    VS Code: به نتیجه بعدی می‌رود F3 بزنید و سپس Ctrl + F اگر
    Example: شما را به تکرار بعدی کلمه جستجو شده می‌برد F3 در یک فایل بلند
  F4 – بستن پنجره/مشاهده تعریف
    ویندوز: Alt + F4 بستن پنجره فعال (مثلاً تب مرورگر در ترکیب با
    IDEها: رفتن به تعریف متغیر/تابع
    Example: بزنید، به تعریف آن تابع می‌روید F4 اگر روی یک تابع کلیک کنید و PyCharm در
  F5 – رفرش/دیباگ
    مرورگر/اکسپلورر: (برای رفرش کامل Ctrl + F5) رفرش صفحه
    VS Code/IDEها: اجرای برنامه یا شروع دیباگ
    Example: برنامه پایتون شما را در حالت دیباگ اجرا می‌کند F5 با زننده VS Code در
  F6 – حرکت بین بخش‌ها
    IDEها: جابجایی بین تب‌ها یا پنل‌ها (مثل حرکت از کد به ترمینال)
    Example: به شما امکان می‌دهد بین فایل‌های پروژه جابجا شوید PyCharm در
  F7 – بررسی املایی/پیمایش دیباگ
    ادیتورها: بررسی املایی (در ورد)
    دیباگر: (ها IDE در برخی Step Into) رفتن به خط بعدی در حین دیباگ
    Example: وارد تابع فراخوانی شده می‌شود Vs Code در دیباگ
  F8 – ادامه دیباگ
    دیباگر: حرکت به خط بعدی بدون ورود به توابع (Step Over)
    Example: خط بعدی را اجرا می‌کند بدون اینکه وارد توابع داخلی شود در دیباگ پایتون
  F9 – توقف/شروع دیباگ
    IDEها: Breakpoint توقف/شروع دیباگ یا تنظیم
    Example: قرار میدهد Breakpoint روی خط فعلی VS Code در
  F10 – منوی برنامه/حرکت در دیباگ
    ویندوز: باز کردن منوی برنامه (مثل نوت‌پد)
    IDEها: خارج شدن از تابع در دیباگ (Step Out)
    Example: بزنید، از تابع فعلی خارج می‌شوید F10 اگر در حال دیباگ هستید و
  F11 – تمام‌صفحه/ورود به تابع
    مرورگرها: حالت تمام‌صفحه
    IDEها: ورود به تابع در دیباگ (Step Into)
    Example: وارد جزئیات تابع می‌شود F11 در ریباگ
  F12 – باز کردن ابزار توسعه‌دهنده
    مرورگرها: باز کردن DevTools (مثل Chrome)
    VS Code: رفتن به تعریف تابع (Go to Definition)
    Example: شما را به تعریف تابع می‌برد F12 در جاوااسکریپت
  Important F Keys: F1 - F2 - F5 - F8 - F9 - F12
===========================================================================================
2) work with command prompt = کار با خط فرمان
open cmd in the computer =
 0 - وارد دایرکتوری یا همون فولدری شوید و سمت راست بخش جستوجو در جایی که لوکیشن فولدر را نوشته کلیک کرده و کل متنو پاک کرده و به جاش متن زیر را بنویسید
cmd
 1 -Run App => windows + R تا نرم افزار باز شود -> a مینوی سیم سی ام دی تا باز کنه خط فرمان رو
 2 - search bar windows => enter in the search bar (cmd)
 3 - windows PowerShell => open PowerShell and write (start cmd)
 4 - تبدیل پاور شل به سی ام دی a => write in the PowerShell (cmd)
 5 - برای باز کردن پنجره ران و پاورشل a => windows + x
 6 - باز کردن آدرس سایت => start https://<adres site>/
    مثال: start https://www.google.com/
    برای سرچ در گوگل: start https://www.google.com/search?q=<enter address web>
    برای اینکه اگر بین کاراکتر های جستوجو فاصله باشه کارکنه باید به جای فاصله + قرار دهیم
 7 - برای اینکه بدونیم که یه دستور چه ویژگی های دارد از این فرمول پیروی میکنیم
    <promtName>/?
 8 - برای اینکه رنگ پسزمینه و متن های سی ام دی را تغییر بدهیم از دستور زیر استفاده میکنیم
    color/? برای اینکه مقادیررا پیدا کنیم
    color <کد پسزمینه> <کد>
    مثال: color 09
    برای اینکه تغییرات پس از بستن برنامه هم بمونه روی ایکون سی ام دی در برنامه راست کلیک کرده 
    click on the switch Properties => color 
    برای تغیر هر جزع تیک اونو فعال کرده سپس رنگو از منوی زیر انتخواب کرده
    screen Text = برای تغییر رنگ متن
    screen Background = تغییر پسزمینه
 9 - بریا تغییر موقت نوشته بالای سی ام دی 
    title <your name>
    توجه پس از بستن برنامه دوباره به حالت اول برمیگرده اسمش
 10 - برای پاک کردن نوشته که زدیم از پس از ابتدایی کار تا آخر
    cls
 11 - برای اینکه وارد یک پوشه ای داخل دایرکتوری شویم
    cd <FolderName>
    یا اگر بخوایم به یک بهره وارد یک پوشه با عمق بیش از بک فولدر شویم 
    cd <addressName>
    اگر بخوایم یک لایه از دایرکتوری که توش هستیم بیرون بیایم و وارد فولدر میدر فولدری که الان توش هستیم شویم
    cd ..
    برگشته یک باره به درایوی که توش هستیم
    cd /
    برای اینکه بدونیم الان در چه مسیری هستیم یا دایرکتوری یا چه پوشه ای
    cd
    این دستور معنیش میشه پوشه کنونی current directory
 12 - برای رفتن به درایو دیگه 
    روش اول:
    cd /d <driveName>:
    روش دوم:
    <driveName>:
 13 - برای اینکه بدونیم توی اون دایرکتوری که هستیم چه فایل ها و فولدرهایی وجود دارد
    dir
    مخفف directory = فهرست راهنما / کتاب راهنما
    برای اینکه فهرستی از ویژگی رو که برای این دستور وجود    داره ببینیم
    dir /?
    برای اینکه اگر داخل یک دایرکتوری هستیم همونجا فهرست محتوای یک دایرکتوری دیگه رو در بیاریم
    dir <location directory>
    بریا اینکه فال هایی با یک فرمت یا پسوند خواص رو توی دایرکتوری فهرست کنه
    dir *.<format name>
    برای اینکه فایل های مخفی هم نمایش داده شوند
    dir /a
    مخفف attributes بر اساس ویژگی میاد نمایش میده
    همین ستور مقادی دیگه هم دارد که بدون فاصله بعد از اْی قرار میگیرند
    ۱ - فقط دایرکتوری ها را به ما نمایش میدهد
    dir /ad 
    مخفف directories = d
    ۲ - فقط فایل های مخفی را به ما نمایش میدهد
    dir /ah
    مخفف hidden files = h 
    ۳ - فقط فایل های سیستمی را به ما نمایش میدهد
    dir /as
    مخفف system files = s 
    برای اینکه بگیم بر اساس چند ویژگی برامون جدا کن فقط کافیه پشت سر هم بنویسیمش
    dir /ahs
    اگر بخوایم بگیم فایل هایی که این ویژگی را دارن نمایش نده
    dir /a-<attributeName>
    مثال: dir /a-h 
    برای انکه فایل ها را بر اساس اندازه نام یا پسوند مرتب کنیم
    dir /o 
    مخفف order = ترتیب
    به تنهایی کاربردی ندارد باید مقادیری درونش قرار دهیم
    1 - بر اساس نام فایل ها بیاد مرتب کنه
    dir /on 
    مخفف name (alephabetic) = n 
    2 - بر اساس پسوند و یا افزونه جدا کنه
    dir /oe 
    مخفف extenshon (alephabetic) = e 
    3 - بر اساس اندازه جدا کنه
    dir /os
    مخفف size (smallest first) = s 
    این اول پوشه هارو نمایش میده بعد از کوچک به بزرگ مرتب میکنه
    میتوان چند فیلتره هم قرار داد فقد کافیه پشت سر هم قرار داد
    مثال: dir /oen 
    میتوان فیلتر ها را برعکس کرد با استفاده از منها
    مثال: dir /o-s از بزرگ به کوچک مرتب میکند
    شاید خیلی فایل توی یک دایرکتوری باشد و ما بخوایم یکی یکی بررسی شون کنیم اگر با این روش انجام بدیم با هر بار کلیک فقط یک صفحه از فهرست نمایش داده میشود 
    dir /p
    برای انکه فقط اسم و نه اطلاعات دیگری از موارد داخل  دایرکتوری به دست آوریم
    1روش: dir /w
    2روش: dir /d
    روش دوم تعداد اسامی در هر ردیف کمی کمتر از ردیف است
 14 - برای ساخت پوشه
    روش1: mkdir <FolderName>
    روش2: md <FolderName>
    برای اینکه چند تا پوشه با یک دستور بسازیم فقط کافیه که بعد از نوشتن فولدر اولی فاصله گزاشته و بعد بعدیرو قرار دهیم
    md <FolderName 1> <FolderName 2> <FolderName ...>
    برای اینکه درون اسم فایل فاصله باشه باید به سورت استرینگ دهیم بهش 
    md "<FolderName>"
    برای اینکه فولدر های تودر تو بسازیم
    md <FolderName parent>/<FolderName child>/...
 15 - برای نمایش درختی فولدر هایی که در دایرکتوری قرار دارد ما
    tree معنی = درخت
 16 - برای حذف پوشه
    روش 1: rmdir <FolderName>
    روش 2: rd <FolderName>
    گاهی برای حذف فولدر های تو در تو یا همونایی که ساختار درختی دارند همینجوری سر سری حذف نمیشن
    روش 1: rd /s <FolderName>
    بعدش باید اینو بنویسیم: y تا کار تمام شود
    روش 2: rd /s /q <FolderName>
    اینجا دیگه بخش مربوط به تعیید نمیاد
    مخفف Quiet = ساکت = q
 17 - برای خروج از برنامه کامند پرامپت
    exit معنی: خروج
 18 - برای تغییر نامه فایل
    روش1: rename <location File or FileName> <new FileName>
    روش2: ren <location File or FileName> <new FileName>
    اگر فایل پسوند داشت باید اون را وارد کنیم
    اگر فاصله ین کاراکتر هایی که ما میخوایم به عنوان اسم جدید قرار دهیم بود یا فایل هدف درون اسمش فاصله باشد باید به صورت استرینگ دهیم
 19 - برای حذف فایل 
    del <FileName>
    توجه! باید پسوند فایل ها را هم بنویسید
    توجه! دیگه فایل حذف شده قابل برگشت نیست
    برای اینکه تمام فایل های با پسوند یکسان را به یکباره حذف کنیم
    del *.<type File>
    برای اینکه فایل هایی که درون اسمشون اسپیس هست حذف کنیم باید درون کتیشن قرارشون دهیم 
    برای اینکه چند فایل را با هم حذف کنیم با یک دستور
    del <FileName 1> <FileName 2> <FileName ...>
    برخی از فایل ها قابلیت رید انلی داردن و به راحتی حذف نمیشون برای حذف انها از این قابلیت استفاده کنید
    del /f <FileName>
    برخی مواقع نیزا هست که یه فایل را در زیر شاخه های از این دایرکتوری که توش هستیم حذف کنیم و نمیدونیم توی کدام زیر شاخا است اما اسم فایل را میدونیم
    del /s <FileName>
    برای ایکه گاهی اوقات شاید برای حذف برخی فایل ها از کاربر اجازه نگیره
    del /q <FileName>
    بریا اینکه بتونیم فایل های سیستمی یا مخفی را حذف کنیم یا یک نوع خواص از فایل ها
    del /a<attributeName> <FileName>
    اتریبیوت ها اَی را میتوانید از داکیومنت در بیارید یا با روش زیر دیش بیارید
    del /?
 20 - برای تغییر ویژگی های فایل
    attrib <+ or - ><attributeName> <FileName> /<extenshon>
    مخفف attribute = ویژگی
    کار+ اینه که به فایل اون ویژگی رامیدهد
    برای - اینه که از فایل اون ویژگی را میگیرد 
    attributes=
        1 - r = Read-only = فقط قابل خوندن
        2 - a = archive = ارشیو
        3 - s = System = سیستمی
        4 - h = Hidden = مخفی
    extenshons = 
        1 - /s = میاد اسم فایلی که دادیم در زیر شاخه ها هم دنبالش میگرده
        2 - /d = بریا زمانیه که میخواهیم یه فولدر را انتخواب کنیم
    برای اینکه تمام فایل های با یک فرمت خواص را به یکباره انتخواب کنیم
    attrib <+ or -><attributeName> *.<formatName> <extenshonName>
    برای اینکه کاری کنیم که فایل زمانی که حتی تیک نمایش فایل های مخفی زده شده نماش داده نشود
    مثال: attrib +s +h <FileName>
    برای نمایش دادنش به جای پلاس از ماینز استفاده کنید
    توجه! اگر ترفند بالا کار نکرد یک بار پس از افزودن ویژگی ها از اون دایرکتوری خارج شوید در محیط گرافیکی بد وارد شوید
    اگر بخوایم لیستی از فایل ها با قابلیت ها بگیریم نه اطلاعات دیگه
    attrib
    توجه در فهرست گیری بالا اگر بخوایم فهرست پوشه ها هم توش باشن باید از افزونه زیر استفاده کنیم که بیای دایرکتوری ها است
    attrib /d
 21 - برای کپی و انتقال فایل ها
    کپی Copy دستور زیر را برای
        copy <addressFile> <addressFolder>
        باری اینکه یک نوع فایل را کپی کنیم
        copy *.<format> <addressFolder>
    برای کات کردن یا انتقال  Cut
        move <addressFile> <addressFolder>
    توجه! گاهی اوقات مکنه که در دایرکتوری که میخوایم کپی کنیم یک فایل یا فولدر با همون اسم هست و یک اجازه باید بدیم تا فایل جایگزین شود مقادیری که میتوان وارد کرد
    no = کاری نکن
    yes = جایگزین کن
    all = هر چند تا این مورد را دارند جایگزین کن
## این بخش تدریس نشود
------------------ این بخش اجباری نیست و نیازی نیست که کار شود
 نکته: برای اجرای ویروس هیی که قرار نوشته شوند بهتره که از یک  سیستم مجازی استفاده کنیم
 یکی از بهنترین سیستم های مجازی نرم افزار
 MVware Workstation نصبش کنید
 
 ابزار دانلود ویندوز 10 را دانلود نید 
 microsoft.com/en-us/software-download/windows10
 
 1 - وارد نرم افزار زیر شویدMVware Workstation
 2 - روی Create a New Virtual Machine
 3 - تیک اولی را فعال کرده و بعد Next
 4 - ادرس فایلی که از مایکروسافت دانلود کردید که 4 گیک حافظه  داشت را وارد کند با پسوند .iso 
 5 - یک لوکیشن که بهش دسترسی داشته باشید وارد کنید
 6 - یه چند تا بعدی بزنید تا این پیام باید Creating Disk
 7 - پس از دانلود بیاید و نرم افزار را باز کنید در بخش زیر 
 My Computer > windows 10 * 64
 بعد گزینه زیر را بزنید
 Powr on this virtual Machine
 برای بستنش در بالا روی ایکن مربوط به بخش باز شده راست کلیک  کنید
 close tap > prowr off 
 ------------------
    22 - برای به دست اوردن اطلاعات سیستمی یک سیستم
    systeminfo
    23 - برای اینکه یک دستور را متیجشو سریع بدون اینکه حتی نتایج    اونو ببینیم در کلیپ برد کپی کنیم
    <command> | clip
    24 - برای اینکه بفهمیم که ورژن ویندوز را به دست بیاریم
    ver
    25 - برای تعریف کامنت در فایل های بچ .bat 
    ::<enter comment>
    26 - برای گرفتن ایپی یک سایت یا زمان واکنش یا همون سرعت لود     سایت
    ping <addressName>
    ادرس بهتریه که از نوع سه دابلیو باشد
    27 - اطلاعات ای پی و گتویو و دی ان اس را بگیریم
    ipconfig
    بریا اینکه اطلاعات کاملتری را بدهد
    ipconfig /all
    28 - معرفی حمله داس 
    کار: باعث کند شدن سرور میشود و سرور را مشغول میکند
    محوا انجام: داده های زیادی را به سرور بفرستید
    مثال: ping <addressName> -t -l <number>
    توجه! بهتره که عددش زیاد نباشه فشار به سی پی یو وارد میکنه
    29 - بازیابی رمز وایفای فراموش شده
    اول: پروفایل هایی که بهشون قبلا متصل شدید درمیارید
        netsh wlan show profiles
    دوم: اطلاعات اون پروفایل مورد نظر را در بیارید
        netsh wlan show profiles <profileName>
    سوم: پسوردشو در بیارید
        netsh wlan show profiles <profileName> key=clear
    رمز وایفای: key content
----------------- نیازی به بلد بودن نداره و خیلی مهم نیست
 - بریا اینکه فایل های بت را به شکل یک نرم افزار در بیاریم به این نرم افزار نیاز داریم
    bat to exe converter
------------------ نیازی به تریس نداره جنبه تفریح - خیلی مهم نیست
 - ویروس ماتریکس matrix viruse
    درون فایل بافرمت بچ این کد هارا بنویسید
    @echo off
    color 0a
    title viruse
    :top 
     echo %random%%random%%random%%random%%random%
    goto top
    چه چیزی نمایش میدهد؟ اعداد رندم که همینطر عدامه دارند
===========================================================================================
3) کاربرد برنامه نویسی
    1 - توسعه نرم افزار 
        Photoshop - Microsoft Office برای دسکتاپ
        اپلیکیشن موبایلی
        ios اپلیکیشن
        برنامه های تحت وب 
    2 - هوش مصنوعی و یادگیری ماشین AI
        پردازش بان طبیعی NLP = ChatGPT - Google Translate
        تشخیص تصویر و صدا
        پیشبینی داده ها
    3 - علم داده و تحلیل داده Data Sience
    4 - اینترنت اشیا IoT = خانه هوشمند
    5 - بازی سازی Game Development = 
        بازی موبایلی و کامپیوتری = Unity(C#) - Unreal Engine (C ++)
    6 - امنیت سایبری Cyber Security
===========================================================================================
4) زبان های برنامه نویسی + شاخه های برنامه نویسی
    1 توسعه وب = JavaScript - PHP - Python
    2 موبایل = Kotlin - Dart - swift
       هم ای او اس هم موبایل = Flutter - React Native
    3 هوش مصنوعی = Python - R  
    4 بازی سازی = c++ - C#
    5 IoT اینترنت اشیاء = Python - C++ - C 
    6 بلاکچین = Solidity - Rust
    7 امنیت = Python - C 
===========================================================================================
5) محیط برنامه نویسی و مکان برنامه نویسی
    1 - محیط های توسعه یکپارچه IDE (Integrated Development 1
    Environment)
    نرم افزار که همه ابزار های لازم رابرای انجام کاری دارد
مثال : 
    Java - Kotlin = inteliJ IDEA
    Python = PyCharm
    اندرویید = Android Studio
    C# - C++ - Python = Visual Studio
    2 - Code Editors
    سبک تر از ای دی ای اما قابل گسترش
مثال:
    sublime Text - Atom - Braket - VS Code
    3 - Online IDEs محیط میتنی بر وب
    codePen - Google Colab
===========================================================================================
6) محل اجرای برنامه های ما
    1 روی کامپیوتر یا لپتاپ
    2 برنامه های تحت وب Wev Applications
    کد هایی که سمت کلاینت اجرا میشوند Frontend = css - html - JavaScript
    روی سرور اجرا میشوند Backend = Python -  PHP - Node.js - Django
    3 برنامه های موبایلی Mobile Apps = Java - Kotlin
    4 برنامه های ابری Cloud-Based
    5 برنامه های بلاک چین Blockchain
===========================================================================================
7) SEO معرفی
    مخفف Search Engine Optimization = بهینه سازی برای موتورهای  جستوجو
    اهمیت SEO =
    1 - قرار گرفتن سایت در ابتدار جستوجوی کاربر 
    2 - اعتبار و اعتماد (Authority)
    3 - تجربه UX بهتر : سریعتر ، خواناتر ، کاربر پسند
    4 - رقابت با رقبا 
    در نتیجه : برای حفظ ارزش سایت و استاندارد بودنش
===========================================================================================
8) UI & UX
UI =
    مخفف User Interface = رابط کاربری
    تعریف: شامل تمام عناصر بصری و تعاملی است که کاربر در سایت میبیند و از آنها استفاده میکند
    چند نمونه از عناصر که به این بخش ربط دارند:
        دکمه - منوها - فرم ها - رنگ ها - فونت ها - تصاویر - چیدمان صفحه
    هدف از یو آی: ایجاد یک تجربه آسان - جذاب - کاربرپسند
    SEO = تاثیر غیرمستقیم دارد
        1 - اگر یو آی ضعیف باشد کاربران خیلی توی سایت نمی مونند
        2 - ریسپانسیو بودن روی سئو تاثیر دارد
        3 - یو آی بهینه روی لود سایت تاثیر دارد مثل استفاده از تصاویر فشرده
    نکات کلیدی طراحی یو آی:
        1 - سادگی : کاربر نباید برای انجام کارها سردرگم شود
        2 - ثبات consistency = رنگ ها،فونت ها و المان ها در تمام صفحه یکسان باشند
        3 - متناسب با مخاطب : سایت ها بر اساس مخاطبی که دارند به سایت خود رنگ و لعاب خاص میدهند مثل سایت تفاوت سایت های خبری با فروشگاهی و یا اداری
UX =
    مخفف User Experience = تجربه کاربری
    تریف: شامل تمام احساسات، رفتار ها و رضایت کاربر هنگام استفاده از سایت است
    هدف:
        1 - کاربر چقدر راحت به هدفش میرسد مثلا خرید محصول یا پیداکردن اطلاعات
        2 - ایا فرایند ها روان هستند مانند ثبتنان یا پرداخت
        3 - آیا کاربر پس از استفاه از سایت احساس خوبی دارد
    SEO = تاثیر مستقیم و غیر مستقیم
چه کسی کار یو آی و یو ایکس را انجام میدهد؟
    تخصص ها: 
    ابزار ها: Adobe XD , Figma , Sketch
    آشنایی با: css , html برای همکاری با بوسعه دهندگان
    توجه: گاهی توسعه دهده فرانت-اند نیز نقش نقش یو آی کار را هم بر اهده دارد
===========================================================================================
9) Responsive Design
    معنی: طراحی واکنشگرا
    تعریف: روشی از طراحی وبسایت گفته میشود که در آن سایت به     صورت خودکار با اندازه های صفحه نمایش دستگاه مختلف مثل   موبایل تبلت و دسکتاپ سازگار شده و محتوا و المان ها به     بهترین شکل نمایش داده میشوند
    اهمیت:
        1 - تجربه کاربری بهتر
        2 - افزایش نرخ ماندگاری: کاهش میزان خروج کاربران به     دلیل نمایش نامناسب
        3 - مدیریت اسان تر: فقط یک نسخه از سایت نیاز به نگهداری     دارد
    SEO =
        1 - گوگل از سال 2015 ریسپانسیو بودن را به عنوان یک  فاکتور رتبه بندی معرفی کرده است
        2 - سایت های ریسپانسیو معمولا سرعت لود بهتری در موبایل  دارند
    روش انجام:
        1 - استفاده از مدیا کوِِِئری ها در سی اس اس
        2 - استفاده از واحد های نسبی به جای مطلق
            مثل: % , vw (viewport) , rem , em
        3 - طراحی Flexible Grid
        4 - استفاده از فریمورک های سی اس اس
            مثال: Tailwind CSS , Bootstrap , Foundation , Bulma
    نکات مهم در پیاده سازی:
        1 - اول موبایل Mobile First : طراحی را از نسخه موبایل   شروع کنید
        2 - تست روی دستگاه های مختلف
        3 - المان های غیر ضروری در موبایل را حذف یا بهینه کنید
    اندازه دیوایس های مهم:
        1- موبایل
            کوچک
                مثل آیفون اس ای
                320px - 479px
            متوسط
                اکثر موبایل ها
                480px - 679px
            بزرگ
                فبلت ها - مثل آیفون 13 پرومکس
                680px - 767px
        2- تبلت های بزرگ و لپتاپ های کوچک
            تبلت 10اینچ - لپتاپ ها 11-13 اینچ
            1000px - 1199px
        3- مانیتور های معمولی
            دسکتاپ - لپتاپ 15 اینچ
            1200px - 1439px    
===========================================================================================
10) فرمت های رنگ / شیوه های بیان رنگ / color formats
    فرمت های مهم رنگ:
    - HEX - RGB - RGBA - HSL - HSLA - Named Colors - ...
    HEX = Hexadecimal
        فرمت: #RRGGBB یا #RGB
        مثال1: نارنجی = #ff5733
        مثال2: سبز : #0f0
        اگر کد دو به دو یکسان باشند میتوان ان را خلاصه کرد و    مثل مثال 2 نوشتش
        مثال: #ff00cc = #f0c
    RGB = (Red, Green, Blue)
        فرمت: rgb(R, G, B)
        مثال: صورتی = rgb(255, 0, 128)
        میتوان از مقادیر درصدی هم استفاده کرد
        مثال: rgb(100%, 0%, 50%)
    RGBA = (Red, Green, Blue, Alpha)
        فرمت: rgb(R, G, B, A)
        مثال: قرمز نیمه شفاف = rgb(255, 0, 0, 0.7)
        مقدار آلفا یین 0 و 1 داده میشود و سه ورودی دیگر از 0 تا     255
    HSL = (Heu, Saturation, Lightness)
        فرمت: hsl(H, S%, L%)
        Heu = فام : تا 360 زاویه رنگ در دایره رنگی
        Saturation = اشباع : خاکستری 0% تا پررنگ %100
        Lightness = روشنایی: سیاه 0% تا سفید %100
        مثال: آبی = hsl(240, 100%, 50%)
    HSLA = (Heu, Saturation, Lightness, Alpha)
        فرمت: hsl(H, S%, L%, Alpha)
        Alpha: شفافیت است از 0 تا 1 مقدار دهی میشود
        مثال: hsla(300, 100%, 50%, 0.7)
    Named Colors = نام رنگ های از پیش تعریف شده
        مثال: blue
        مثال: red 
===========================================================================================
11) یکا های اندازه گیری / Measuring units 
    Absolute Units : این واحد ها ثابت هستند و وابسته به محیط    نمیش تغییر نمی کنند
    نمونه هایی از این واحد:
    px پیکسل: رایج ترین واحد در طراحی وب
    سانتی متر cm - میلی متر mm - اینچ in : اینها بیشتر برای چاپ استفاده میشوند
    Relative Units : این واحد ها نسبت به یک مرجع تعیین میشوند   مثل اندازه فونت والد و یا عرض صفحه
    نمونه هایی از این واحد:
    em - نسبت به فونت سایز عنصر والد
    rem - html یصبت به فونت سایز ریشه 
    % - درصد اندازه والد
    vw , vh - درصد از عرض و ارتفاع
    vmin , vmax - viewport حد اقل / حد اکثر عرض یا ارتفاع 
    1- px پیکسل
    ویژگی ها: 1- یک واحد مطلق و ثابت است
        2- در تمام دستگاه ها یکسان نمایش داده میشود
        3- مناسب با طراحی هایی که نیاز به دقت پیکسلی دارند
    معایب: 1- درصفحه نمایش های با تراکم پیکسلی بالا مثل رتینا ممکن است کوچک به نظر برسد 
        2- انعطاف پذیر نیست و برای طراحی ریسپانسیو چندان مناسب نیست
    2- em 
    ویژگی ها: 1- یک واحد نسبی است و بر اساس فونت سایز والد محاسبه میشود
        2- برای طاحی های انعطاف پذیر مناسب است
    معایب: چون وابسته به والد است در سلسله مراتب تو در تو ممکن است محاسبات پیچیده شود
    نحوه کار: اگر فونت سایز والد آن 15پیکسل باشد و فونت سایز خودش 2ای ام باشد در اصل فونت سایزش 30 پیکسل است
    3- rem (Root EM)
    ویژگی: 1- محاسبه میشود root: یا html بر اساس فونت سایز ریشه 
        2- تحت تاثیر سلسله مراتب والدین قرار نمیگیرد em برخلاف
    4- % درصد 
    ویژگی ها: 1- نسبت به اندازه والد محابه میشود
    2- برای عرض و ارتفاع و فونت سایز کاربرد دارد
    5- vh = هر عددی که بهش بدی نسبت به ویوپرت به درصد حساب  میشود و برای ارتفاع قرار میگیرد
    6- vw = هر عددی که بهش بدی نسبت به ویوپرت به درصد حساب  میشود و برای عرض قرار میگیرد
    پیشنهاد:
        برای فونت ها: rem بهترین برای ریسپانسیو -> em اگر نیاز  به وابستگی به والد بود
        برا عرض/ارتفاع: % , vh/vw برای ریسپانسیو -> px برای     اندازه های ثابت
        برای چاپ: cm, mm
        margin/padding: px -> rem بسته به نیاز 
===========================================================================================
12) دانش ریاضی Mathematical knowledge
    برای شروع برنامه نویسی بستگی به شاخه ای که انتخواب میکنید   ممکن است که دانش ریاضی بسیار حیاتی و یا کم احمیت باشد یا  اصلا نیاز نباشد
    1- برنامه نویسی هایی که نیاز کمی به ریاضی دارند یا اصلا     نیازی ندارند
        1- توسعه وب (Frontend/Backend)
        2- توسعه اپلیکیشن های موبایل
        3- اسکریپت نویسی و اتوماسیون
        دانش مورد نیاز=
            عملیات پایه : جمع - تفریق - ضرب - تقسیم
            درصد - میانگین
            بردار ها: محورX - محورY - محورZ
    2- براناه نویسی های که نیاز متوسط به ریاضی دارند
        1- توسعه بازی های ساده Game Development
        کاربرد ریاضی:
            1- حرکت کاراکترها
            2- تشخیص برخورد
        دانش مورد نیاز=
            جبر مثلثات پایه - بردارها
        2- برنامه نویسی سیستم های نه چندان پیچیده
        مثل: توسعه نم افزار های اداری یا مدیریتی
        دانش مورد نیاز:
            منطق و الگوریتم های پایه
    3- برنامه نویسی هایی که نیز به دانش ریاضی بالایی دارند
        1- هوش مصنوعی و بادگیری ماشین AI/ML 
            مثال: مدل سازی داده، شبکه عصبی
            دانش مورد نیاز:
                1- جبر خطی
                2- آمار
                3- احتمال
                4- حسابان
                5- ماتریس ها
        2- توسعه بازی های سه بعدی و موتور های گرافیکی
            دانش مورد نیاز:
                1- مثلثات پیشرفته
                2- جبر خطی 
                3- ماتریس ها
        3- رمز نگاری Cryptography
            دانش مورد نیاز:
                1-نظریه اعداد
                2- جبر کجرد
        4- داده کاوی و علم داده Data Science
            دانش مورد نیاز:
                1- آمار
                2- احتمال
                3- جبر خطی
    پیشنهاد:
        ابتدا حوضه مورد علاقه خود را انتخواب کرده و سپس یک زبان     برنامه نویسی از ان حوضه را یاد بگیرید
        سپس با توجه به نیازتون اون بخش های ریاضیاتیش را یاد     بگیرید
===========================================================================================
13) باگ Bug 
    تعریف: به خطا یا نقص در یک برنامه کامپیوتر گفته میشود که    
    باعث رفتار نادرست، خرابی 
    یا نتیجه گیری اشتباه میشود
    تاریخچه اصطلاح باگ: در سال 1947 توسط گریس هاپر گزارش شد 
        که یک حشره در رله های کامپیوتر هارواردمارک باعث خطا شده!
    انواع باگ در برنامه نویسی:
        1- خطا های نحوی Syntax Errors
        2- خطا های زمان اجرا Runtime Errors
        3- خطا های منطقی Logical Errors
        4- خطا های امنیتی Security Bugs
        5- خطا های چند نخی multithreading Bugs 
        6- خطا های کارایی Performance Bugs
    دلایل ایجاد باگ :
        1- اشتباه انسانی: تایپ اشتباه، منطق نادرست 
        2- عدم تست کافی: پیاده سازی برون برسی موارد های گوناگون     و اطمینان از کار کرد درست در حالت های مختلف
        3- تغییرات ناخواسته : اصلاح بخشی از کد و ایجاد باگ در   بخش دیگر
        4- وایستگر ها: قدیمی یا ناسازگار API کتابخانه ها یا 
    خطرات باگ ها:
        1- خرابی سیستم System Crash : ازدست دادن داده ها
        2- اسیب مالی یا اعتمادی
        3- مشکلات امنیتی: نشت اطلاعات کاربران 
        4- اتلاف زمان توسعه دهندگان: گاهی یافتن باگ ساده ساعت   ها طول میکشد!
    مثال های مشهور از باگ های تاریخی:
        Y2K = ذخیره سال به صورت دورقمی 00 به جای 2000 باعث خطا  در سیستم مالی شد.
        Mars Climate Orbiter = اختلاف واحد های متریک و امپریال  باعث سقوط فضاپیما شد!
        Apple SSL Bug = اتصال امن را آسیب پذیر کرد SSL خطا در   بررسی گواهی 
        Therac-25 = باگ در دستگاه پرتودرمانی باعث مرگ بیماران   شد!
    راه های جلوگیری از باگ:
        1-تست واحد Unit Testing = نوشتن تست های خودکار برای     توابع
        2- بازبینی کد Code Review = بررسی کد توسط توسعه دهندگان     دیگر یا خودتون
        3- استفاده از ابزار های تحلیل استاتیک: مثل = ESLing -   SonarQube
        4- مستند سازی : توضیح منطق کد برای جلوگیری از سوء تفاهم
        5- اجتناب از کد های اسپاگتی : طراحی تمیز کد
    نتیجه: باگ ها اجتناب ناپذیرند، اما با روش های صحیح میتوان آن ها را کم کرد
===========================================================================================
14) دیباگ کردن Debugging
    تعریف: فرایند شناسایی و تحلیل و رفع خطاها یا باگ ها در کد   است
    کاربرد دیباگ کردن:
        1- پیداکردن خطاهای منطقی Logical Errors
            قتی برناه اجرا میشود اما خروجی اشتباه میدهد
        2- رفع خطاهای نحوی Syntax Errors
            اشتباهات نگارشی که باعث میشود کد اصلا اجرا نشود
        3- حل مشکلات اجرایی Runtime Errors
            مانند تقسیم بر صفر یا دسترسی به حافظه نامعتبر
        4- بهبود عملکرد Performance Optimization
            پیداکردن بخش های کند یا ناکارآمد
    اهمیت دیباگ:
        1- کاهش هزینه ها
        2- افزایش امنیت
        3- بهبود کیفیت کد
        4- صرفه جویی در زمان
    چه زمانی دیباگ انجام میشود؟
        1- درحین توسعه: وقتی برنامه نویس متوجه رفتار غیرمنتظره  میشود
        2- پس از گزارش خطا Bug Report : وقتی کاربر یا تستر باگی     را گزارش میدهد
        3- قبل از انتشار نرم افزار Pre-Release : برای اطمینان   از پیدار بودن محصول
    نکات مهم در دیباگ کردن:
        1- استفاده از ابزار های دیباگ
        2- چاپ مقادیر
        3- تقسیم مسئله به بخش های کوچک
        4- بازبینی کد Code Review
        5- بررسی مستندات و Stack Overflow
    بخش رایج دیباگ در برنامه نویسی:
        1- حلقه ها Loops = بررسی ایندکس های اشتباه یا شرط های   نادرست
        2- شرط ها Conditionals = خطا در منطق 
        3- توابع و متد ها : ورودی های نامعتبر یا خروجی های غیر  منتظره
        4- کار با حافظه Memory Management = نشت حافظه در زبان   هایی مثل سی پلاس پلاس
        5- کار با فایل ها و دیتابیس : بررسی فایل یا دسترسی ها
    نتیجه: باگ ها همیشه با برنامه نویسی همراه اند و باید همیشه  بهشون توجه کرد چون هرچه دیرتر رفع شن عواقب بد تری دارد
===========================================================================================
15) کامنت comment
    چیستند comment ? توضیحات متنی هستند که در کد قرار میگیرند   تا برای انسان ها قابل خواندن باشد و توسط کامپایلر یا مفسر     نادیدگه گرفته می شود.
    کاربرد های کامنت: 
        1- افزایش خوانایی کد : برای درک منطق کد و الگوریتم
        2- مستند سازی : توضیح هدف تابع ، متغیر ، کلاس
        3- کمک به دیباگ : مشخص کردن بخش های مشکوک یا نیازمند    اصلاح یا تشخیص مکان باگ در کد
        4- همکاری تیمی : فهم کد برای سایر برنامه نویسان
        5- غیر فعال کردن موقت کد : جلوگیری از اجرای بخشی از کد  بدون حذف آن در دیباگ
    ویژگی ها کامنت خوب:
        1- واضح و مختصر : بدون توضیحات اضفی یا مبهم
        2- به روز : هنگام با تغییر کد ، اصلاح شود
        3- بخش مهم : فقط بخش های پیچیده یا حیاتی را توضیح دهید
        4- حذف کامنت هایی که کد آنها حذف شده
    انواع کامنت :
        1- کامنت های تک خطی : کامنت هایی طولانی نیستند و در یک  خط یا بخشی از یک خط از کد نوشته میشوند
        2- کامنت های چند خطی : کامنت های که طولانی هستند و برای     راحتی خوندن ما آنهارا در چند خط استفاده میکنیم و این    نوع برای غیر فعال کردن کد ها پیشنهاد میشود چون قابلیت  این را دارد که بخش خاصی از کد را به یکباره در بر گیرد
    نتیجه: 1- کامنت گذاری برای توسعه کد ضروری است
        2- زیاد یا کم نویسی کد هر دو مضر است
        3- بهترین کامنت کامنتی است که نیاز به خوندن کد را کاهش  دهد
===========================================================================================
16) مراحل ساخت سایت
    1- برنامه ریزی و تعیین هدف سایت
        تعیین هدف سایت: فروشگاهی - شرکتی - وبلاگی
        تحلیل نیاز: امکانات مورد نیاز
            مثل: پرداخت آنلاین - فرم تماس - سیستم عضویت ...
        شناسایی مخاطبین: چه کسانی از سایت استفاده میکنند؟
        تحلیل رقبا: بررسی سایت های مشابه برایه ایده گیری
    2- و هاستینگ Domain انتخواب نام دامنه
        ثبت دامنه: .com - .ir - .io 
        خرید هاست 
        انتخواب سیستم عامل هاست: 
            لینوکس: برای PHP , MySQL
            ویندوز: برای ASP.NET 
    3- طراحی و توسعه
        الف) طراحی UI/UX رابطه کاربری 
            طراحی اولیه ساختار صفحه: با ابزار های figma , adobe     XD
            طراحی گرافیکی: انتخواب رنگ - فونت - المان های بصری
        ب) توسعه فرانت اند Frontend سمت کاربر
            1- کدنویسی با JavaScript , css , html
            2- انتخوا و استفاده از فریمورک: React - Vue.js -    Tailwind CSS - Bootstrap
        ج) توسعه بکاند Backend سمت سرور
            انتخواب زبان برنامه نویسی: PHP, Python, Node.js,    ASP.NET
            پیگاه داده: MongoDB, MySQL, SQLite, PostgreSQL
    4- تست و اشکال زدایی
        1- تست عملکرد : بررسی لینک ها ، فرم ها ، پرداخت ها
        2- تست سازگار: نمایش صحیح در مرورگر های مختلف
        3- تست واکنش گرایی Responsive : نماسش مناسب در  موبایل،تبلت،دسکتاپ
        4- تست سرعت: بهینه سازی تصاویر، کاهش حجم کدها
    5- راه اندازی و انتشار
        آپلود فایل ها به هاست1: یا کنترل پنل هاست FTP  از طریق
        2- DNS تنظیم : اتصال دامنه به هاست
        3- SSL نصب: HTTPS فعال کردن 
    6- SEO بهینه سازی برای موتور جستوجو
        تحقیق کلمات کلیدی: استفاده از ابزار های مثل  Google     keyword Planner
        بهینه سازی محتوا: عنوان ها، متا تگ ها، توضیحات متا
        بهینه URl ساختار: خوانا وشامل کلمه کلیدی
        ثبتنام در گوگل سرچ کنسول Google Search Console
    7- نگهداری و به روزرسانی
        بررسی امنیت: نصب آخرین آپدیت، استفاده از فایروال و  آنتیویروس
        پشتیبان گیری Backup: تهیه نسخه پشتیبان منظم
        آنالیز برافیک: استفاده از Google Analytics
        اضافه کردن محتوای جدید: مقالات، محصولات جدید و ...
===========================================================================================
17) روند تبدیل کد به چیزی که سیستم بفهمش 
    ۱. زبان‌های کامپایلی (مثل C, C++, Rust, Go)
    کامپایلر (Compiler) کد را به زبان ماشین (Binary/اسمبلی) تبدیل   می‌کند.
    
    CPU مستقیماً کدهای باینری را اجرا می‌کند.
    کامپایلر (مثل gcc) این کد را به فایل اجرایی (a.out یا exe.) تبدیل   می‌کند.
    وقتی برنامه را اجرا می‌کنید، CPU دستورات را مستقیماً پردازش می‌کند.
    
    ۲. زبان‌های مفسری (Python, JavaScript, PHP)
    مفسر (Interpreter) کد را خط به خط خوانده و اجرا می‌کند.
    کد به صورت مستقیم اجرا می‌شود (بدون کامپایل اولیه).
    ۳. زبان‌های ترکیبی (Java, C#)
    کد به بایت‌کد (Bytecode) تبدیل می‌شود.
    ماشین مجازی (مثل JVM در جاوا) بایت‌کد را اجرا می‌کند.
===========================================================================================
18) فرمت های برخی فایل ها
    1= فایل های عام General files
        1) .mp3 مخفف MPEG-1 Audio Layer 3
            ذخیره سازی فایل های صوتی با فشرده سازی بالا 
            فشرده سازی: حذف فرکانس های غیرقابل شنیدن برای انسان
            مناسب بریا: موزیک - پادکست - کتاب های صوتی
        2) .mp4 مخفف MPEG-4 Part 14
            ذخیره سازی ویدیو،صدا،زیرنویس تصاویر در یک فایل
            مناسب برای: فیلم،کلیپ های آموزشی،ویدیو های شبکه اجتماعی
        3) .jpg مخفف Joint Photographic Experts
            عکس های معمولی
            ویژگی ها:
                1= فشرده سازی با کاهش کیفیت
                2= پشتیبانی کشترده در تمام دستگاه ها
                3= حجم کم، مناسب برای وب
            point! هم شناخته میشود JPEG گاهی اوقات با نامه 
        4) .png مخفف  Portable Network Graphics
            تصاویر با پسزمینه شفاف
            مناسب بریا: لوگوها و آیکون ها و تصاویر با جزعیات بالا
            ویژگی ها:
                1= فشرده سازی بدون افت کیفیت
                2= پشتیبانی از شفافیت transparency
            point! دارد jpg حجم فایل بیشتری نسبت به 
        5) .gif مخفف  Graphics Interchange Format
            تصاویر متحرک
            ویژگی: 
                1= پشتیبانی از انیمیشن
                2= پشتیبانی از شفافیت transparency
                3= محدود به 256 رنگ
        6) webP مخفف Web Picture توسعه یافته توسط گوگل
            تصاویر وب
            مناسب برای سایت های مدرن
            ویژگی ها:
                1= JPEG , PNG فشرده سازی بهتر نسبت به 
                2= کیفیت بالا با حجم کمتر
                3= پشتیبانی از انیمیشن
                4= پشتیبانی از شفافیت transparency
            point! ولی توست مرورگر های قدیمی ممکن هست پشتیبانی نشود , هست برای وب JPEG , PNG بهتر از 
        7) .svg مخفف Scalable Vector Graphics
            لوگو ها،آیکون ها، تصاویر برداری
            مناسب برای: طاحی وب UI طراحی های که نیاز به تغییر سایز دارند 
            ویژگی ها: 
                1= برداری - بدون کیفیت در بزرگنمایی
                2= قابل ویرایش با کد XML-based 
            Point! مناسب برای عکس هی پیکسلی نیست
        8) .psd مخفف Photoshop Document
            فایل ها فتوشاپ و پروژه ای فتوشاپ
        9) .doc مخفف Document
            فایل های ورد با این نوع فرمت ذخیره میشوند
        10) .zip / .rar
            برای فشرده کردن فیل ها استفاده میشود
            میتواند چند فایل را به صورت یک پک با هم فشرده کرده
    2= فایل های کد منبع Source Code Files
        1) .py مخفف Python
            کاربرد: کد های پایتون
            حوزه مرتبط: Data Science, AI
            زبان: Python
        2) .js مخفف JavaScript
            کاربرد: کد های جاوااسکریپت
            حوزه مرتبط: Frontend(React, Node.js)
            زبان: JavaScript
        3) .java 
            کاربرد: کد های جاوا
            حوزه مرتبط: Android Development
            زبان: Java
        4) .c مخفف C
            کاربرد: C کد های
            حوزه مرتبط: Embedded, سیستم عامل
            زبان: C
        5) .cpp مخفف C++
            کاربرد: C++ کد های
            حوزه مرتبط: Embedded, سیستم عامل
            زبان: C++
        6) .cs مخفف C#
            کاربرد: C# کد های
            حوزه مرتبط: .NET, Game Development(Unity)
            زبان: C#
        7) .php مخفف PHP
            کاربرد: PHP کد های
            حوزه مرتبط: Backend(WordPress, Laravel)
            زبان: PHP
        8) .rb مخفف Ruby
            کاربرد: کد های روبی
            حوزه مرتبط: Wev Development(Ruby on Rails) - DevOps
            زبان: Ruby
        9) .go مخفف Go
            کاربرد: Go کد های
            حوزه مرتبط: Backend, Cloud Services
            زبان: Go
        10) .swift مخفف Swift
            کاربرد: کد های سئیبت
            حوزه مرتبط: iOS Development
            زبان: Swift
        11) .kt مخفف Kotlin / .kts
            کاربرد: کد های کاتلین
            حوزه مرتبط: Android(Kotlin)
            زبان: Kotlin
    3= فایل های ماک آپ و داده ای
        1) .html مخفف  HTML
            کاربرد: ساخت صفحات وب
            حوزه مرتبط: Frontend(HTML5)
            زبان:HTML5
        2) .css  مخفف CSS
            کاربرد: استایلدهی وب
            حوزه مرتبط: Frontend(CSS3, Sass)
            زبان: CSS
        3) .xml
            کاربرد: داده های ساختار یافته
            حوزه مرتبط: Android, API
            زبان: XSLT - XPath - XQuery
        4) .json  مخفف  JavaScript Object Notation
            کاربرد: داده های سبک و خوانا
            حوزه مرتبط: Frontend / Backend(API)
            زبان: JavaScript
        5) .yaml  /  .yml  
            کاربرد: تنظیمات و کانفینگ
            حوزه مرتبط: DevOps, Docker, Kubernets
        6) .sql  مخفف  Structured Query Language = زبان پرس‌وجوی ساختاریافته
            کاربرد: کد های پایگاه داده 
            حوزه مرتبط: Database(MySQL, PostgreSQL)
            زبان:SQL
    4= فایل های اجرایی و کامپایل شده
        1) .exe  مخفف Executable File= فایل اجرایی
            کاربرد: فایل های اجرایی ویندوز
            حوزه مرتبط: Windows App
            زبان: C++, C#, Delphi
        2) .dll  مخفف Dynamic Link Library
            کاربرد: کتابخانه های پویا
            حوزه مرتبط: Windows Development - Game Development
            زبان: C, C++, C#
        3) .apk  مخفف  Android Package Kit= کیت بسته اندروید
            کاربرد: اپلیکیشن اندرویید 
            حوزه مرتبط:  Android
            زبان: Java, Kotlin
        4) .ipa  مخفف iOS App Store Package
            کاربرد: iOS اپلیکیشن
            حوزه مرتبط: iOS
            زبان: Swift, Objective-C 
        5) .jar  مخفف Java ARchive
            کاربرد: اجرای جاوا
            حوزه مرتبط: Java Applications
            زبان: Java
        6) .so  مخفف / .a  
            کاربرد: کتابخانه ها  لینوکس
            حوزه مرتبط: Linux
            زبان: C, C++
        7) .bat مخفف Batch
            کاربرد: نصب و راه‌اندازی نرم‌افزار - مدیریت سیستم
            حوزه مرتبط: Windows App
            زبان: CMD - Batch scripting یا Batch language
    5= فایل های مربوط به توسعه وب و طراحی
        1) .scss / .sass  
            کاربرد: CSS پیشرفته 
            حوزه مرتبط: Frontend(Sass)
            زبان: Sass
        2) .less 
            کاربرد: CSS پیش پردازنده 
            حوزه مرتبط: Frontend(Less.js)
            زبان: Less.js
        3) .vue 
            کاربرد: کامپوننت های فرانت اند 
            حوزه مرتبط: Frontend(Vue.js)
            زبان: Vue.js
        4) .jsx مخفف  
            کاربرد: کامپوننت های فرانت اند
            حوزه مرتبط: Frontend(React)
            زبان: React
        5) .ejs  مخفف  
            کاربرد: تمپلیت ها سرور
            حوزه مرتبط: Backend(Node.js)
            زبان: Node.js
        6) .pug  مخفف  
            کاربرد: تمپلیت های سرور
            حوزه مرتبط: Backend
            زبان: Express
    6= فایل های مربوط به مدیریت پروژه و نسخه بندی
        1) .git  مخفف Git
            کاربرد: نسخه برداری از پروژه
            حوزه مرتبط: All
            زبان: Git
        2) .gitignore 
            کاربرد: Git فایل های نادیده گرفته شده توسط
            حوزه مرتبط: All
            زبان: Git
        3) .md مخفف Markdown 
            کاربرد: مستندات
            حوزه مرتبط: GitHub,Wiki
            زبان: Markdown
            مثال: در گیتهاب README.md فایل های
            Point! یک زبان نشانه گذاری سبک است HTML مثل 
        4) .dockerfileمخفف Docker File
            کاربرد: کانفیگ داکر
            حوزه مرتبط: DevOps, Cloud
            زبان: Doucker
        5) .env مخفف  environment variables
            کاربرد: متغیر ها محیطی
            حوزه مرتبط: Backend, DevOps
            زبان: Node.js, Python, PHP, Go 
    7= فایل های داده و ذخیره سازی
        1) .csv  مخفف Comma-Separated Values
            کاربرد: داده های جدولی
            حوزه مرتبط: Data Science
            زبان: Python
            نرم‌افزار: Excel
        2) .db / .sqlite 
            کاربرد: پایگاه داده سبک
            حوزه مرتبط:Mobile Apps (Android,iOS),Desktop Apps
            موتور پایگاه داده: SQLite
        4) .xlsx  مخفف 
            کاربرد: اکسل
            حوزه مرتبط: گزارش گیری
            نرم افزار: Excel
    8= و ابزار های توسعه IDE فایل های مخصوص 
        1) .sln مخفف Solution
            کاربرد: VS پروژه 
            نرم افزار: Visual Studio
        2) .xcodeproj مخفف Xcode Project
            کاربرد: Xcode پروژه های 
            حوزه مرتبط: iOS, macOS Development
        3) .idea 
            کاربرد: IntelliJ تنظیمات 
            نرم افزار: PyCharm, ...
            زبان: Python, Kotlin, Java      
===========================================================================================
19) مرجع آموزش زبان های برنامه نویسی Reference for teaching programming languages
در فایل پیوست قرار دارد
===========================================================================================
20) Characters names = نام کاراکتر ها
  =-= !
    English: Exclamation mark
    فارسی: علامت تعجب

===========================================================================================
end) سوال های متداول Frequently asked questions
 part1
    برنامه نویسان به چه شکلی کار میکنند؟
        1- کار حضوری On-Site
           چطور؟: حضور فیزیکی در دفتر یا شرکت طبق ساعات کاری مشخص
            مزایا:
                1-ارتباط مستقیم با تیم (حل سریع مشکلات)
                2-دسترسی به منابع شرکت (سرورها، ابزارهای خاص 
            معایب:
                1-زمان‌بری رفت‌وآمد.
                2-محدودیت انعطاف‌پذیری.
            مناسب برای:
                1- پروژه‌های محرمانه (مثل بانک‌ها).
                2- تیم‌های نیازمند همکاری فوری (مثل استارتاپ‌ها).
        2- کار شیفتی (مخصوص شرکت‌های ۲۴ ساعته)
            چطور؟: برنامه‌نویسی در شیفت‌های چرخشی (صبح/عصر/شب).
            مزایا: حقوق بالاتر برای شیفت شب.
            معایب: اختلال در ریتم خواب.
            مناسب برای: شرکت‌های پشتیبانی فنی جهانی.
        3- کار دورکاری (Remote)
            چطور؟: انجام پروژه از خانه یا هر مکان دیگر با ابزارهای آنلاین
            مزایا:
                1- انعطاف‌پذیری زمانی و مکانی.
                2- تمرکز بیشتر برای برخی افراد.
            معایب: چالش‌های ارتباطی در تیم‌های بزرگ
            مناسب برای:
                1- فریلنسرها یا شرکت‌های بین‌المللی.
                2- پروژه‌های مبتنی بر Cloud (مثل توسعه وب).
        4- فریلنسینگ (پروژه‌ای)
            چطور؟: انجام پروژه‌های مستقل برای چندین مشتری 
            مزایا:
                1- آزادی انتخاب پروژه و ساعت کار.
                2- درآمد متنوع.
            معایب:
                1- عدم ثبات مالی.
                2- مدیریت چالش‌برانگیز چند پروژه.
            مناسب برای: توسعه‌دهندگان با تجربه که شبکه ارتباطی قوی دارند.
        5- کار ترکیبی (Hybrid)
            چطور؟: ترکیبی از حضوری و دورکاری (مثلاً ۳ روز دفتر، ۲ روز خانه)
            مزایا: تعادل بین ارتباطات تیمی و آزادی عمل.
            معایب: نیاز به هماهنگی دقیق.
            مناسب برای: شرکت‌های مدرن (مثل گوگل، مایکروسافت).
        6- مشارکتی (Co-working Spaces)
            چطور؟: کار در فضای اشتراکی با سایر فریلنسرها.
            مزایا:شبکه‌سازی و الهام‌گیری از دیگران.
            معایب: هزینه اجاره فضای کار.
        7- پروژه‌های Open Source (داوطلبانه یا حرفه‌ای)
            چطور؟: مشارکت در پروژه‌های متن‌باز (مثل GitHub).
            مزایا: تقویت رزومه و مهارت‌ها.
            معایب: درآمد کم یا بدون درآمد مستقیم.
    سطوح مهارتی برنامه نویسان؟
        ۱. سطح Junior (تازه‌کار)
            تجربه: ۰ تا ۲ سال
            مسئولیت‌ها:
                1- پیاده‌سازی وظایف ساده تحت نظارت دیگران
                2- رفع باگ‌های جزئی
                3- یادگیری مستمر مفاهیم پایه
            مهارت‌های کلیدی:
                1- تسلط به یک زبان برنامه‌نویسی (مثل Python/JavaScript)
                2- آشنایی با Git و مفاهیم پایه‌ای دیتابیس
            حقوق تقریبی (دلار/سال): ۳۰,۰۰۰ - ۶۰,۰۰۰
        ۲. سطح Mid-Level (میان‌رده)
            تجربه: ۲ تا ۵ سال
            مسئولیت‌ها:
                1- توسعه ماژول‌های مستقل
                2- همکاری در طراحی معماری نرم‌افزار
                3- راهنمایی جونیورها
            مهارت‌های کلیدی:
                1- تسلط به فریمورک‌ها (مثل React/Django)
                2- توانایی دیباگ پیچیده
            حقوق تقریبی (دلار/سال): ۶۰,۰۰۰ - ۹۰,۰۰۰
        ۳. سطح Senior (ارشد)
            تجربه: ۵+ سال
            مسئولیت‌ها:
                1- طراحی معماری سیستم‌های بزرگ
                2- تصمیم‌گیری‌های فنی کلیدی
                3- مربی‌گری برای تیم
            مهارت‌های کلیدی:
                1- تسلط به الگوهای طراحی (Design Patterns)
                2- مهارت در بهینه‌سازی و مقیاس‌پذیری
            حقوق تقریبی (دلار/سال): ۹۰,۰۰۰ - ۱۳۰,۰۰۰
        ۴. سطح Lead/Architect (رهبر فنی/معمار)
            تجربه: ۸+ سال
            مسئولیت‌ها:
                1- تعیین استانداردهای فنی شرکت
                2- مدیریت چندین تیم توسعه
                3- ارتباط مستقیم با مدیران محصول
            مهارت‌های کلیدی:
                1- دانش عمیق DevOps و Cloud
                2- مهارت‌های مدیریتی
            حقوق تقریبی (دلار/سال): ۱۳۰,۰۰۰ - ۱۸۰,۰۰۰
        5سطح Principal/CTO (مدیر ارشد فنی)
            تجربه: ۱۰+ سال
            مسئولیت‌ها:
                1- تعیین استراتژی فنی سازمان
                2- مدیریت بودجه فناوری
                3- استخدام نیروهای کلیدی
            مهارت‌های کلیدی:
                1- دید تجاری قوی
                2- دانش عمیق بازار فناوری
            حقوق تقریبی (دلار/سال): ۱۸۰,۰۰۰+
        🎯 مسیر پیشرفت حرفه‌ای: 
            Junior → Mid-Level → Senior → Lead → Principal/CTO
    در آمد برنامه نویسان هر شاخه و سطح شغلی؟
        به دلار در فایل پیوست قرار داده شده است
        حقوق در ایران IR (تومان سالانه)
        Junior = 60 - 120 میلیون
        Mid-Level = 120 - 240 میلیون
        Senior = 240 - 400+ میلیون
    سایت های فریلنسری معبر خارجی و ایرانی؟
        خارجی: بین‌المللی
            1- Upwork 2- Fiverr 3- Freelancer 4- Toptal 5- Guru
        ایانی: IR
            1- Ponisha 2- Parscoders 3- Jobinja Freelance 4- Faranesh 5- IranFreelancer 6- jobvision 7- quera
 part2
    کیبرد مناسب برای برنامه نویسی؟
        نوع کیبرد: مکانیکال ) سوییچی
        سوییچ:
            ۱- خطی Liner بیصدا ونرم
                مثال: Silent Red / Cherry MX Red
            ۲- تاکتیکال Tactile احساس ضربه ملایم بدون ضدا ) پیشنهاد میشود
                مثال: Zealio / Cherry MX Brown
            ۳- کلیکی Clicky صدا و فیدبک قوی
                مثال: Cherry MX Blue / Kailh Box
        اندازه کیبرد: 
         ۱- استاندارد و کامل Full-size 
            شامل نامپد و کلید های اف ۱ تا ۱۲
            مناسب: برای کسایی که با اعداد زیاد کار میکند
         ۲- Tenkeyless(TKL)
            بدون نامبر پد و فضای کمتری را اشغال میکند قابل حمل 
         ۳- ارگونومیک: طراحی انحنادار یاتقسیمشده برای کاهش فشار روی مچ دست
            پیشنهاد شده
        نورپس زمینه Backlight: توصیه شده
            RGB : برای کار در محیط های کم نور مفید است
            قابلیت تنظیم روشنایی: کاهش نور در شب برای جلوگیری از خستگی چشم
        تچربه تایپ راحت:
            ۱-زاویه شیب دار: تنظیم ارتفاع برای موقعیت طبیعی دست
            ۲- فاصله استاندارد کلید ها: جلوگیری از اشتباهات تایپی
            ۳- صدا: سوییچ بیصدا: برای محیط های اشتراکی
        اتصالات )سیمی vs بیسیم
            ۱- سیمی Wired: توصیه شده: تاخیر کمتر و اتصال پایدار
            ۲- بیسیم Bluetooth/Wireless: آزادی حرکت و مدیریت بهتر کابلها
                توجه: حتما سرعت انتقال دستور بالایی باید داشته باشد
            
    موس مناسب برای برنامه نویسی؟
        طراحی ارگونومیک و راحتی: جلوگیری از خستگی و سندروم تونل کارپال
        دقت سنسور و رزولوشن (DPI/CPI)
            DPI قابل تنظیم: حد اقل ۱۰۰۰ تا ‍۱۶۰۰
        نوع اتصال ) سیمی vs بیسیم
         سیمی Wired تاخیر صفر و نیاز به شارژ ندارد
         بیسیم wireless آزادی حرکت و تمیزتر  : توصیه
            تکنولوژی Low-Latency
        موس پیشنهادی:   بیسیمی ارگونومیک و همه کاره - موس های گیمینگ برای دقت بالا و سیمی

    مانیتور مناسب برای برنامه‌نویسی؟
        ۲۷ اینچ: اندازه مناسب برای برنامه نویسی ) عدم نیاز به چرخش سر
        بالا تر از۲۷ اینچه: عالی برا چند پنجره کاری ) نمایش مرورگر و کد و ترمینال با هم ) توصیه شده
        رزولوشن QHD (2560*1440) متن واضح نمایش داده میشود - فضای بیشتر برای چند پنجره
        نوع پنل: IPS ) دقت بالا - رنگهای عالی - زاویه دید گسترده 
            معایب: VA کنتراست پایین تر از
            استفاده: برنامه نویسی و طراحی گرافیکی
        نرخ تازهسازی (Refresh Rate)
            ۱- ۶۰Hz: برای برنامهنویسی کافی است (مگر بازی هم  میکنید).
            ۲- ۷۵Hz-۱۲۰Hz: حرکت نرمتر ماوس و اسکرول راحتتر.) پیشنهاد
        کاهش نور آبی و فلیکر (Eye Care) هر دو مورد زیر پیشنهاد  شده
            ۱-تکنولوژی کم کردن نور آبی (Low Blue Light): مثل LG’s Reader Mode یا BenQ’s Low Blue Light.
            ۲-عدم پرش تصویر (Flicker-Free): از خستگی چشم در     طولانی مدت جلوگیری میکند.
        تنظیمات ارگونومیک ) مورد ۱ و ۲ پیشنهاد شده
            ۱- قابلیت تنظیم ارتفاع (Height Adjustable): برای    جلوگیری از درد گردن.
            ۲- شیب و چرخش (Tilt & Swivel): تنظیم زاویه برای  راحتی بیشتر.
            ۳- چرخش به حالت عمودی (Pivot): مفید برای خواندن  کدهای طولانی.
        چند نمونه بهترین نوع مانیتور:
            ۱-بهترین گزینهی کلی: Dell Ultrasharp U2723QE (4K،IPS، USB-C، ارگونومیک).
            ۲-گزینهی ارزانتر: AOC Q27P2U (QHD، IPS، پایهی قابل  تنظیم).
            ۳-برای فضای گسترده: LG 34WN80C (اولترا واید، IPS،USB-C).
            ۴-برای کاربران مک: LG UltraFine 32UN880 (سازگاری عالی با مک).
    
    آهنگ گوش دادن هنگام برنامه نویسی؟
        فواید:
            1- افزایش تمرکز
            2- تقویت خلاقیت
            3- کاهش استرس
            4- ایجاد انگیزه
            5- مسدود کردن نویز محیط
        نوع آهنگ:
            1- بی کلام 
            2- بیکلام ) با زبان خارجی مثل انگلیسی
            3- طبیعت
        آهنگ های نامناسب:
            1- آهنگ با وضوح کلام بالا ) رَپ - پاپ
                حواس پرتی ایجاد میکنه
            2- ریتم نامظم ) متال
                تمرکز را مختل میکند
            3- آهنگ های بیش از حد احساسی ) هر سبکی ممکنه باشه
                ذهن را درگیر میکنه
        توجه!: اگر از هندسفری استفاده میکنید صدای آهنگ را زیاد نکنید و کامل جزب گوش نکنید
        استفاه طولانی مدت از هندسفری برای گوش مضر است
        -- تجربه ناگوار --
    
    عینک مطالعه استفاده کنیم؟
        1- عینک ضد نور آبی Blue Light ) پیشنهاد شده
            مزایا: کاهش خستگی چشم - اختلات خواب ناشی از نور آبی صفحه نمایش
            مناسب برای: افرادی که ساعات طولانی مقابل کامپیوتر کار میکنند
            نکته: این عینک ها بدون نسخه هم موجودند
            توجه!: اگر مشکل بینایی دارید بهتر است با پزشک مشورت کنید
        2-  عینک با لنز ضد انعکاس Anti-Reflective Coating
            مزایا: کاهش انعکاس نور از لنز و افزایش وضوح دید
            مناسب برای: محیط های پر نور یا کسانی که از چندین نمایشگر استفاده می کنند
        3- عینک با فوکوس متوسط Computer Glasses ) پیشنهاد شده
            مزایا: برای فاصله ۵۰ -۷۰ سانتیمتری بهینه شده اند که فاصله کاربر تا صفحه است
            مناسب برای: مبتلا به پیر چشمی یا افرادی که هنگانم کد نویسی دچار خستگی چشم میشوند
        4- عینک به قاب راحت ) پیشنهاد شده
            ۱- قاب سبک
            ۲- پد بینی نرم
                جنس: تیتانیم / استیل سبک / هرچیز سبکتر
        نکات تکمیلی:
            ۱- هر ۲۰ دقیقه به مدت ۲۰ ثانه به یک مکان دور نگاه کنید
            ۲- نور محیط و صفحه نمایش را طوری تنظیم کنید که چشم تحت فشار نباشد
            ۳- عینک را تمیز نگه دارید همیشه
 part3
    فرق زبان برنامه نویسی و فریمورک و لایبرری و ماژول؟
        در فایل پیوست قرار دارد.
    روش های مختلف نام گذاری؟
      فایل پیوست موجواست
      نکته: توی همگی از فاصله استفاده نمیشود
      1- Camel Case
        Meaning: کمل کیس = حالت شتری
        Use in: JavaScript, Java, C#
        Types: 
          1- Lower Camel Case
            اولین کلمه با حرف کوچک نوشته میشود و باقی با حرف بزرگ شروع میشوند
            Place of use: function متغیر- تابع variable
            Example: JavaScript
              let userName = "Ilar";
              function calculateTotalPrice() {}
        2- Upper Camel Case
          همه کلمات با حرف بزرگ شروع میشوند
          Place of use: class کلاس
          Example: java 
            calss UserProfile {}
        Strengths:
          1- Java - JavaScript رایج در
          2- ندارد Underline نیاز به تایپ 
        Weaknesses: ممکن است برای نام های طولانی خوانایی کمتری داشته باشد
      2- Kebab Case
        کلمات با خط تیره "-" جدا میشوند
        Meaning: حالت کبابی
        Place of use:  id, class, URL,
        Use in: HTML, CSS
        Example: HTML
          <p class="user-first-name"></p>
        Strengths: URL,CSS خوانایی عالی در
        Weaknesses: در بسیاری از زبان ها قابل استفاده نیست و خط تیره به عنوان عملگر تفریق تفسیر میشود
      3- Snake Case
        Meaning: حالت مار 
        - از هم کلمات جدا میشوند "_" Underline با 
        Use in: Python, Ruby, PHP, SQL 
        Example: Python
          user_age = 19
          def calculate_total_price():
            pass
        Strengths:
          1- خوانایی بالا برای نام های طولانی
          2- استاندارد رایج در پایتون و برخی زبان ها
        Weaknesses: 
          1- ممکن است سخت یا کند باشد Underline تایپ
          2- در برخی زبان ها کمتر مرسوم است
      4- Screaming Snake Case 
        Meaning: حالت مار فریاد زننده
        تمامی حروف با حرف بزرگ نوشته میشودن و بین هر کلمه "_" آندرلاین وجود دارد
        Place of use: constant ثابت
        Use in: بسیاری از زبان ها
        Example: Python
          MAX_CONNECTIONS = 100
        Strengths: تمایز واضح ثابت از متغیر ها
        Weaknesses: برای نام های طولانی خوانایی کمتری دارد
      5- Pascal Case
        Meaning: حالت پاسکالی
        همه کلمات با حرف بزرگ شروع میشوند
        Place of use: Class کلاس
        Use in: TypeScript, Java,C#
        Example: C#
          class UserFamily {}
        Strengths: تمایز واضح بین کلاس ها و متغیر ها
        Weaknesses: اگر برای متغیر ها ساتفاده شود ممکن است باعث اشتباه شود
      توجه!: رعایت استاندارد های نامگذاری در هر زبان برای خوانایی و کار تیمی ضروری است

===========================================================================================
## End level 0 ##